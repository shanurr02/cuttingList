import 'package:flutter/material.dart';

class AddItemDialog extends StatefulWidget {
  final Future<void> Function(String itemType, Map<String, dynamic> inputs)
      onSave;

  AddItemDialog({
    required this.onSave,
  });

  @override
  _AddItemDialogState createState() => _AddItemDialogState();
}

class _AddItemDialogState extends State<AddItemDialog> {
  final TextEditingController lengthController = TextEditingController();
  final TextEditingController widthController = TextEditingController();
  final TextEditingController depthController = TextEditingController();
  final TextEditingController slabsController = TextEditingController();

  String selectedItem = 'Default';

  @override
  Widget build(BuildContext context) {
    return AlertDialog(
      title: Text('Add New Item'),
      content: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          // Dropdown to select item type
          DropdownButton<String>(
            value: selectedItem,
            items: [
              DropdownMenuItem(value: 'Default', child: Text('Select Item')),
              DropdownMenuItem(value: 'Cupboard', child: Text('Cupboard')),
              DropdownMenuItem(value: 'Table', child: Text('Table')),
            ],
            onChanged: (value) {
              setState(() {
                selectedItem = value!;
              });
            },
          ),
          SizedBox(height: 0),

          // Conditional fields based on selection
          if (selectedItem == 'Cupboard' || selectedItem == 'Table') ...[
            TextField(
              controller: lengthController,
              decoration: InputDecoration(labelText: 'Length'),
              keyboardType: TextInputType.numberWithOptions(decimal: true),
            ),
            TextField(
              controller: widthController,
              decoration: InputDecoration(labelText: 'Width'),
              keyboardType: TextInputType.numberWithOptions(decimal: true),
            ),
            TextField(
              controller: depthController,
              decoration: InputDecoration(labelText: 'Depth'),
              keyboardType: TextInputType.numberWithOptions(decimal: true),
            ),
          ],
          if (selectedItem == 'Cupboard')
            TextField(
              controller: slabsController,
              decoration: InputDecoration(labelText: 'Number of Slabs'),
              keyboardType: TextInputType.number,
            ),
        ],
      ),
      actions: [
        TextButton(
          onPressed: () {
            Navigator.of(context).pop();
          },
          child: Text('Cancel'),
        ),
        TextButton(
          onPressed: () {
            if (selectedItem == 'Default' ||
                lengthController.text.isEmpty ||
                widthController.text.isEmpty ||
                depthController.text.isEmpty) {
              // Add validation
              showDialog(
                context: context,
                builder: (BuildContext context) {
                  return AlertDialog(
                    title: Text('Error'),
                    content: Text('Please fill all the required fields.'),
                    actions: [
                      TextButton(
                        onPressed: () {
                          Navigator.of(context).pop();
                        },
                        child: Text('OK'),
                      ),
                    ],
                  );
                },
              );
            } else {
              Map<String, dynamic> inputs = {
                'length': lengthController.text,
                'width': widthController.text,
                'depth': depthController.text,
              };
              if (selectedItem == 'Cupboard') {
                inputs['slabs'] = slabsController.text;
              }
              widget.onSave(selectedItem, inputs);
              Navigator.of(context).pop();
            }
          },
          child: Text('Save'),
        ),
      ],
    );
  }

  @override
  void dispose() {
    lengthController.dispose();
    widthController.dispose();
    depthController.dispose();
    slabsController.dispose();
    super.dispose();
  }
}
