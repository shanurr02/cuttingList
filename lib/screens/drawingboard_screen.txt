import 'package:flutter/material.dart';
import 'package:flutter_colorpicker/flutter_colorpicker.dart';

class DrawingScreen extends StatefulWidget {
  @override
  _DrawingScreenState createState() => _DrawingScreenState();
}

class _DrawingScreenState extends State<DrawingScreen> {
  List<List<DrawnLine>> _pages = [[]];
  int _currentPageIndex = 0;
  List<DrawnLine> get _currentPage => _pages[_currentPageIndex];
  Color _currentColor = Colors.black;
  double _strokeWidth = 4.0;
  double _eraserSize = 10.0;
  String _activeTool = 'pen';

  double _a4Width = 8.27 * 96;
  double _a4Height = 11.69 * 96;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text("Drawing Tool (Page ${_currentPageIndex + 1})"),
        backgroundColor: Colors.blueAccent,
        actions: [
          IconButton(icon: const Icon(Icons.undo), onPressed: _undo),
          IconButton(icon: const Icon(Icons.redo), onPressed: _redo),
          IconButton(icon: const Icon(Icons.color_lens), onPressed: _pickColor),
          IconButton(
              icon: const Icon(Icons.brush), onPressed: _pickStrokeWidth),
          IconButton(
            icon: Icon(
              Icons.highlight,
              color: _activeTool == 'highlighter' ? Colors.yellow : null,
            ),
            onPressed: () => _setTool('highlighter'),
          ),
          IconButton(
            icon: Icon(
              Icons.auto_awesome,
              color: _activeTool == 'eraser' ? Colors.grey : null,
            ),
            onPressed: _pickEraserSize,
          ),
          IconButton(icon: const Icon(Icons.refresh), onPressed: _clearCanvas),
        ],
      ),
      body: Padding(
        padding: const EdgeInsets.symmetric(horizontal: 10.0),
        child: Center(
          child: Container(
            width: _a4Width,
            height: _a4Height,
            decoration: BoxDecoration(
              border: Border.all(color: Colors.black, width: 2.0),
              borderRadius: BorderRadius.circular(10),
            ),
            child: GestureDetector(
              onPanStart: (details) => _startLine(details.localPosition),
              onPanUpdate: (details) => _updateLine(details.localPosition),
              onPanEnd: (_) => _endLine(),
              onHorizontalDragEnd: (details) =>
                  _handleSwipe(details.primaryVelocity),
              child: CustomPaint(
                painter: DrawingPainter(lines: _currentPage),
                size: Size(_a4Width, _a4Height),
              ),
            ),
          ),
        ),
      ),
    );
  }

  void _startLine(Offset startPoint) {
    setState(() {
      final paint = Paint()
        ..color = _activeTool == 'eraser'
            ? Colors.transparent // Transparent color for eraser
            : (_activeTool == 'highlighter'
                ? _currentColor.withOpacity(0.3)
                : _currentColor)
        ..strokeCap = StrokeCap.round
        ..strokeWidth = _activeTool == 'eraser' ? _eraserSize : _strokeWidth
        ..blendMode = _activeTool == 'eraser'
            ? BlendMode.clear
            : BlendMode.srcOver; // Proper eraser blending

      _currentPage.add(DrawnLine([startPoint], paint));
    });
  }

  void _updateLine(Offset updatePoint) {
    setState(() {
      _currentPage.last.points.add(updatePoint);
    });
  }

  void _endLine() {
    setState(() {
      _currentPage.last.points.add(null);
    });
  }

  void _undo() {
    setState(() {
      if (_currentPage.isNotEmpty) {
        _currentPage.removeLast();
      }
    });
  }

  void _redo() {}

  void _clearCanvas() {
    setState(() {
      _currentPage.clear();
    });
  }

  void _pickColor() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text("Select Color"),
        content: SingleChildScrollView(
          child: BlockPicker(
            pickerColor: _currentColor,
            onColorChanged: (color) {
              setState(() {
                _currentColor = color;
                _activeTool = 'pen';
              });
              Navigator.of(context).pop();
            },
          ),
        ),
      ),
    );
  }

  void _pickStrokeWidth() {
    double selectedWidth = _strokeWidth;
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text("Select Stroke Width"),
        content: Slider(
          value: selectedWidth,
          min: 1.0,
          max: 20.0,
          onChanged: (value) {
            setState(() {
              selectedWidth = value;
            });
          },
        ),
        actions: [
          TextButton(
            onPressed: () {
              setState(() {
                _strokeWidth = selectedWidth;
              });
              Navigator.of(context).pop();
            },
            child: const Text("OK"),
          ),
        ],
      ),
    );
  }

  void _pickEraserSize() {
    double selectedSize = _eraserSize;
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text("Select Eraser Size"),
        content: Slider(
          value: selectedSize,
          min: 5.0,
          max: 50.0,
          onChanged: (value) {
            setState(() {
              selectedSize = value;
            });
          },
        ),
        actions: [
          TextButton(
            onPressed: () {
              setState(() {
                _eraserSize = selectedSize;
                _activeTool = 'eraser';
              });
              Navigator.of(context).pop();
            },
            child: const Text("OK"),
          ),
        ],
      ),
    );
  }

  void _setTool(String tool) {
    setState(() {
      _activeTool = tool;
    });
  }

  void _handleSwipe(double? velocity) {
    setState(() {
      if (velocity != null && velocity < 0) {
        if (_currentPageIndex == _pages.length - 1) {
          _pages.add([]);
        }
        _currentPageIndex++;
      } else if (velocity != null && velocity > 0) {
        if (_currentPageIndex > 0) {
          _currentPageIndex--;
        }
      }
    });
  }
}

class DrawnLine {
  List<Offset?> points;
  Paint paint;

  DrawnLine(this.points, this.paint);
}

class DrawingPainter extends CustomPainter {
  final List<DrawnLine> lines;

  DrawingPainter({required this.lines});

  @override
  void paint(Canvas canvas, Size size) {
    for (var line in lines) {
      if (line.paint.blendMode == BlendMode.clear) {
        // Erase using clipRect to make sure transparency is applied correctly
        canvas.saveLayer(Rect.fromLTWH(0, 0, size.width, size.height), Paint());
        for (int i = 0; i < line.points.length - 1; i++) {
          if (line.points[i] != null && line.points[i + 1] != null) {
            canvas.drawLine(line.points[i]!, line.points[i + 1]!, line.paint);
          }
        }
        canvas.restore();
      } else {
        for (int i = 0; i < line.points.length - 1; i++) {
          if (line.points[i] != null && line.points[i + 1] != null) {
            canvas.drawLine(line.points[i]!, line.points[i + 1]!, line.paint);
          }
        }
      }
    }
  }

  @override
  bool shouldRepaint(covariant CustomPainter oldDelegate) {
    return true;
  }
}
